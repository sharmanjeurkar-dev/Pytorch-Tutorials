{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Fundamental Workflow\nIn a neural network, the basic workflow goes from adding and importing data, which is then split into training and testing sets. Then, a model is created where its parameters are randomly initialized in the __init__ method, and a forward method defines the actual computation that uses these parameters. These parameters are updated using an optimizer by learning from the training data over numerous times, which are known as epochs. A loss function is set up where the difference between the predicted value and the actual value is calculated. This loss is then used by calling loss.backward() to calculate the gradients, which tell the optimizer the direction to adjust the parameters to reduce the loss. The optimizer then performs the update with optimizer.step(). For testing, gradients are not calculated; the model is set to evaluation mode with model.eval(), and predictions are made on the testing data inside a torch.inference_mode() block. This is a typical workflow of PyTorch neural network models.  ","metadata":{}},{"cell_type":"code","source":"import torch\nfrom torch import nn\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"ef12613c-1fff-4713-add8-1f94995f162b","_cell_guid":"a6ac2894-4d86-42d9-8e1f-db1112d8f543","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T16:36:11.638143Z","iopub.execute_input":"2025-09-30T16:36:11.638498Z","iopub.status.idle":"2025-09-30T16:36:11.644697Z","shell.execute_reply.started":"2025-09-30T16:36:11.638475Z","shell.execute_reply":"2025-09-30T16:36:11.642967Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create data\nweight = 0.7\nbias = 0.3\n\nstart = 0\nend = 1\nstep = 0.02\n\nX = torch.arange(start,end,step).unsqueeze(dim = 1) #features\nY = X*weight + bias #labels\n\nX,Y","metadata":{"_uuid":"2c5bbb0a-bf99-4858-b9ed-994e2cb9d56e","_cell_guid":"ae1902ef-6cf9-4195-81e2-364d50d4ab63","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T16:37:16.335398Z","iopub.execute_input":"2025-09-30T16:37:16.335723Z","iopub.status.idle":"2025-09-30T16:37:16.350572Z","shell.execute_reply.started":"2025-09-30T16:37:16.335701Z","shell.execute_reply":"2025-09-30T16:37:16.349300Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Splitting data\ntrain_split = int(0.8 * len(X))\nX_train,Y_train = X[:train_split],Y[:train_split]\nX_test,Y_test = X[train_split:],Y[train_split:]\nlen(X_train),len(X_test)","metadata":{"_uuid":"c2c239b6-0c53-4ac5-b327-8a174b98ecdd","_cell_guid":"af737aaa-7665-4f29-8d88-15f0b750e584","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T16:42:16.164019Z","iopub.execute_input":"2025-09-30T16:42:16.164380Z","iopub.status.idle":"2025-09-30T16:42:16.174173Z","shell.execute_reply.started":"2025-09-30T16:42:16.164350Z","shell.execute_reply":"2025-09-30T16:42:16.172784Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_predictions(train_data=X_train, \n                     train_labels=Y_train, \n                     test_data=X_test, \n                     test_labels=Y_test, \n                     predictions=None):\n  \"\"\"\n  Plots training data, test data and compares predictions.\n  \"\"\"\n  plt.figure(figsize=(10, 7))\n\n  # Plot training data in blue\n  plt.scatter(train_data, train_labels, c=\"b\", s=4, label=\"Training data\")\n  \n  # Plot test data in green\n  plt.scatter(test_data, test_labels, c=\"g\", s=4, label=\"Testing data\")\n\n  if predictions is not None:\n    # Plot the predictions in red (predictions were made on the test data)\n    plt.scatter(test_data, predictions, c=\"r\", s=4, label=\"Predictions\")\n\n  # Show the legend\n  plt.legend(prop={\"size\": 14});","metadata":{"_uuid":"d68bff6c-9a56-4976-b933-fcfa754a5768","_cell_guid":"b68bf7ac-7777-4d65-aaf6-3b706cc6c9b1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T16:46:34.154820Z","iopub.execute_input":"2025-09-30T16:46:34.155099Z","iopub.status.idle":"2025-09-30T16:46:34.162326Z","shell.execute_reply.started":"2025-09-30T16:46:34.155081Z","shell.execute_reply":"2025-09-30T16:46:34.161343Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_predictions()","metadata":{"_uuid":"3dc52243-70c1-4555-b6db-e74ee5362857","_cell_guid":"dcb5eb61-b864-408f-a5f8-1b50cb3fafa1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T16:46:44.948776Z","iopub.execute_input":"2025-09-30T16:46:44.949072Z","iopub.status.idle":"2025-09-30T16:46:45.243850Z","shell.execute_reply.started":"2025-09-30T16:46:44.949053Z","shell.execute_reply":"2025-09-30T16:46:45.242604Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Create a class where the main computation of model would be written which extends the parent clss nn.module and uses nn.Parameter\nclass Linear_Regression_Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        #initialize the model parameters\n        self.weights = nn.Parameter(torch.randn(1, #Start with random weights and it will later tune it accordingly after it learns\n                                               dtype = torch.float32),\n                                              requires_grad = True) # Updatable with gradient descent))\n        self.bias = nn.Parameter(torch.randn(1, #Start with random weights and it will later tune it accordingly after it learns\n                                               dtype = torch.float32),\n                                              requires_grad = True) # Updatable with gradient descent))\n\n    def forward(self,x:torch.Tensor)->torch.Tensor:\n        return self.weights*x + self.bias #this is the linear regression formula","metadata":{"_uuid":"41a0b613-2c72-429e-a2af-83bd108b49e7","_cell_guid":"b93beda4-41ab-402d-9093-55ebbd3f954a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T19:00:19.546411Z","iopub.execute_input":"2025-09-30T19:00:19.546880Z","iopub.status.idle":"2025-09-30T19:00:19.554032Z","shell.execute_reply.started":"2025-09-30T19:00:19.546844Z","shell.execute_reply":"2025-09-30T19:00:19.552509Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":82},{"cell_type":"code","source":"#Create a object of our Class\ntorch.manual_seed(42)\n\nmodel = Linear_Regression_Model()\nlist(model.parameters())","metadata":{"_uuid":"21bdd295-4c67-4a0e-8a0b-794937431ff7","_cell_guid":"ee2f57a1-dcf2-4530-a855-3a993e322dc3","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T19:00:23.652855Z","iopub.execute_input":"2025-09-30T19:00:23.653190Z","iopub.status.idle":"2025-09-30T19:00:23.668749Z","shell.execute_reply.started":"2025-09-30T19:00:23.653168Z","shell.execute_reply":"2025-09-30T19:00:23.667518Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"[Parameter containing:\n tensor([0.3367], requires_grad=True),\n Parameter containing:\n tensor([0.1288], requires_grad=True)]"},"metadata":{}}],"execution_count":83},{"cell_type":"code","source":"# Make predictions\n#with torch.inference_mode():\n   # predictions = model(X_test)\n    \n#predictions","metadata":{"_uuid":"f8936b4d-0bbf-44c9-a8d0-454433feb55c","_cell_guid":"bc72f5df-ea4a-4b58-a062-80404ea30b51","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T17:28:05.002077Z","iopub.execute_input":"2025-09-30T17:28:05.002743Z","iopub.status.idle":"2025-09-30T17:28:05.011579Z","shell.execute_reply.started":"2025-09-30T17:28:05.002718Z","shell.execute_reply":"2025-09-30T17:28:05.010541Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# plot_predictions(predictions = prediction)","metadata":{"_uuid":"02f71be5-1ff1-4560-8ef1-b117585af716","_cell_guid":"63f95817-8b42-4881-9fe5-f45ea6961df8","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T17:28:08.218548Z","iopub.execute_input":"2025-09-30T17:28:08.218915Z","iopub.status.idle":"2025-09-30T17:28:08.525441Z","shell.execute_reply.started":"2025-09-30T17:28:08.218893Z","shell.execute_reply":"2025-09-30T17:28:08.524322Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a loss Function\nloss_fn = nn.L1Loss() #Mean Absolute Loss Function\n\n#Create  Optimizer\noptimizer = torch.optim.SGD(params = model.parameters(),# Tells the optimizer what is to be updates\n                            lr = 0.0001) # Sets at what rate are the values to be updated)","metadata":{"_uuid":"3d096f91-d12f-46b7-9a8a-9c09902dbd36","_cell_guid":"57baacce-a7f7-48b4-b9c0-d67fec3bdab6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T19:02:41.003042Z","iopub.execute_input":"2025-09-30T19:02:41.003426Z","iopub.status.idle":"2025-09-30T19:02:41.008596Z","shell.execute_reply.started":"2025-09-30T19:02:41.003397Z","shell.execute_reply":"2025-09-30T19:02:41.007588Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":88},{"cell_type":"markdown","source":"# The Game of Loops For Training and Testing \n### Training Loop\n![image.png](attachment:1dfaf56e-db35-4da2-afeb-bf7a5b3f1c46.png)\n\n### Testing Loop\n![image.png](attachment:1463ee0c-dc83-4a2a-a9f2-2bd0414736b3.png)","metadata":{"_uuid":"68d8a3b9-7179-4391-bf8b-c00bd6a1f8f8","_cell_guid":"25063741-32bb-4ce5-994c-6946ac657c2e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"\n#training loop and testing loop\n\n# set epochs\nepochs = 100 #number of times the model should look at the trainign data\n\n# Creating empty list for the metrics recieved across the loop\ntraining_loss_values = []\ntesting_loss_values = []\nepoch_count = []\n\nfor epoch in range(epochs):\n    # Training .....\n    # Give model the training data\n    model.train()\n\n    #Predict the data on the basis of training data given earlier\n    train_prediction = model(X_train)\n\n    #Caluclate the loss\n    loss_train = loss_fn(train_prediction,Y_train)\n\n    # Set Zero Gradient for new gradient calculation\n    optimizer.zero_grad()\n\n    #Backpropogation\n    loss_train.backward()\n\n    #To update and imporve the optimizer with gradient calculation when requires_grad = True\n    optimizer.step()\n\n    # Testing .....\n    model.eval()\n    with torch.inference_mode():\n\n        # Forward pass on Data\n        prediction_test = model(X_test)\n\n        #Calculate the loss\n        loss_test = loss_fn(prediction_test,Y_test.type(torch.float32))\n\n        #To print Whats happening\n        if epoch%10 == 0:\n            epoch_count.append(epoch)\n            training_loss_values.append(loss_train.detach().numpy())\n            testing_loss_values.append(loss_test.detach().numpy())\n            print(f'Epoch: {epoch} |\\n Mean Absolute Error Train loss: {loss_train} |\\n Mean Absolute Error Test loss: {loss_test} |\\n')","metadata":{"_uuid":"7db92686-bc46-4bd0-a15f-375cc2f6e47c","_cell_guid":"cd3cc375-e4b2-49ea-8e03-c7f703a75625","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-09-30T19:02:44.579053Z","iopub.execute_input":"2025-09-30T19:02:44.579427Z","iopub.status.idle":"2025-09-30T19:02:44.640369Z","shell.execute_reply.started":"2025-09-30T19:02:44.579402Z","shell.execute_reply":"2025-09-30T19:02:44.639261Z"}},"outputs":[{"name":"stdout","text":"Epoch: 0 |\n Mean Absolute Error Train loss: 0.024110013619065285 |\n Mean Absolute Error Test loss: 0.05645202845335007 |\n\nEpoch: 10 |\n Mean Absolute Error Train loss: 0.024075111374258995 |\n Mean Absolute Error Test loss: 0.05634186789393425 |\n\nEpoch: 20 |\n Mean Absolute Error Train loss: 0.024040203541517258 |\n Mean Absolute Error Test loss: 0.05623173713684082 |\n\nEpoch: 30 |\n Mean Absolute Error Train loss: 0.02400529943406582 |\n Mean Absolute Error Test loss: 0.056121598929166794 |\n\nEpoch: 40 |\n Mean Absolute Error Train loss: 0.023970961570739746 |\n Mean Absolute Error Test loss: 0.056045759469270706 |\n\nEpoch: 50 |\n Mean Absolute Error Train loss: 0.023936616256833076 |\n Mean Absolute Error Test loss: 0.055963099002838135 |\n\nEpoch: 60 |\n Mean Absolute Error Train loss: 0.02390221506357193 |\n Mean Absolute Error Test loss: 0.05588041990995407 |\n\nEpoch: 70 |\n Mean Absolute Error Train loss: 0.023867884650826454 |\n Mean Absolute Error Test loss: 0.05580459162592888 |\n\nEpoch: 80 |\n Mean Absolute Error Train loss: 0.023833531886339188 |\n Mean Absolute Error Test loss: 0.05572192743420601 |\n\nEpoch: 90 |\n Mean Absolute Error Train loss: 0.02379913069307804 |\n Mean Absolute Error Test loss: 0.05563921853899956 |\n\n","output_type":"stream"}],"execution_count":89},{"cell_type":"code","source":"plot_predictions(predictions = prediction_test)","metadata":{"_uuid":"7aa15dab-18f9-444e-b466-e7fc701b06db","_cell_guid":"482987aa-f97b-4768-a21c-c58206038a1d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-09-30T19:02:52.081058Z","iopub.execute_input":"2025-09-30T19:02:52.081417Z","iopub.status.idle":"2025-09-30T19:02:52.379270Z","shell.execute_reply.started":"2025-09-30T19:02:52.081385Z","shell.execute_reply":"2025-09-30T19:02:52.378259Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"#Saving the model\nfrom pathlib import Path\n\n# 1. Create models directory \nMODEL_PATH = Path(r'/kaggle/working/')\nMODEL_PATH.mkdir(parents=True, exist_ok=True)\n\n# 2. Create model save path \nMODEL_NAME = \"Linear_Regression_model.pth\"\nMODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n\n# 3. Save the model state dict \nprint(f\"Saving model to: {MODEL_SAVE_PATH}\")\ntorch.save(obj=model.state_dict(), # only saving the state_dict() only saves the models learned parameters\n           f=MODEL_SAVE_PATH) \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:09:14.980949Z","iopub.execute_input":"2025-09-30T19:09:14.981304Z","iopub.status.idle":"2025-09-30T19:09:14.990069Z","shell.execute_reply.started":"2025-09-30T19:09:14.981275Z","shell.execute_reply":"2025-09-30T19:09:14.988964Z"}},"outputs":[{"name":"stdout","text":"Saving model to: /kaggle/working/Linear_Regression_model.pth\n","output_type":"stream"}],"execution_count":92},{"cell_type":"code","source":"#Load Model\n# Instantiate a new instance of our model (this will be instantiated with random weights)\nloaded_model = LinearRegressionModel()\n\n# Load the state_dict of our saved model (this will update the new instance of our model with trained weights)\nloaded_model.load_state_dict(torch.load(f=MODEL_SAVE_PATH))\n\n#loaded_model acts like a new instance of trained model. So hence only with torch.inference_mode u can do prediction","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:11:08.403509Z","iopub.execute_input":"2025-09-30T19:11:08.403882Z","iopub.status.idle":"2025-09-30T19:11:08.417020Z","shell.execute_reply.started":"2025-09-30T19:11:08.403860Z","shell.execute_reply":"2025-09-30T19:11:08.416181Z"}},"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"<All keys matched successfully>"},"metadata":{}}],"execution_count":93}]}