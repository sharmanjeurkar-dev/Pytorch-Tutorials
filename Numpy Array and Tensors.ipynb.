{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T14:55:29.777090Z","iopub.execute_input":"2025-09-30T14:55:29.777523Z","iopub.status.idle":"2025-09-30T14:55:35.405118Z","shell.execute_reply.started":"2025-09-30T14:55:29.777489Z","shell.execute_reply":"2025-09-30T14:55:35.404194Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"### Tensor to Numpy Array","metadata":{}},{"cell_type":"code","source":"tensor = torch.arange(1,10)\ntensor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:02:27.041675Z","iopub.execute_input":"2025-09-30T15:02:27.041964Z","iopub.status.idle":"2025-09-30T15:02:27.049990Z","shell.execute_reply.started":"2025-09-30T15:02:27.041945Z","shell.execute_reply":"2025-09-30T15:02:27.048629Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"tensor([1, 2, 3, 4, 5, 6, 7, 8, 9])"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"nparray = tensor.numpy() # to convert a tensor to numpy \nnparray = nparray+1\ntensor = tensor-1# change of tensor not applicable to nparray and vice versa\nnparray,tensor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:02:49.467986Z","iopub.execute_input":"2025-09-30T15:02:49.468343Z","iopub.status.idle":"2025-09-30T15:02:49.477277Z","shell.execute_reply.started":"2025-09-30T15:02:49.468291Z","shell.execute_reply":"2025-09-30T15:02:49.476232Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"(array([ 2,  3,  4,  5,  6,  7,  8,  9, 10]),\n tensor([0, 1, 2, 3, 4, 5, 6, 7, 8]))"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"array = np.arange(1.0,10.0)\narray","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:13:00.821017Z","iopub.execute_input":"2025-09-30T15:13:00.821465Z","iopub.status.idle":"2025-09-30T15:13:00.829268Z","shell.execute_reply.started":"2025-09-30T15:13:00.821441Z","shell.execute_reply":"2025-09-30T15:13:00.827992Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"array([1., 2., 3., 4., 5., 6., 7., 8., 9.])"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"tensor_from_nparray = torch.from_numpy(array)\ntensor_from_nparray","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:13:03.408084Z","iopub.execute_input":"2025-09-30T15:13:03.408442Z","iopub.status.idle":"2025-09-30T15:13:03.416464Z","shell.execute_reply.started":"2025-09-30T15:13:03.408419Z","shell.execute_reply":"2025-09-30T15:13:03.415475Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.], dtype=torch.float64)"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"tensor_from_nparray =tensor_from_nparray+1\narray =array-1#both are now independant\nprint(tensor_from_nparray)\nprint(array)\n# Default dtype of nparray when given floating point values is float64. \n# But for tensors, the defult dtype is float32. Hence arrays need to be change to dtype float32\ntensor_from_nparray.type(torch.float32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:13:05.130475Z","iopub.execute_input":"2025-09-30T15:13:05.130779Z","iopub.status.idle":"2025-09-30T15:13:05.143017Z","shell.execute_reply.started":"2025-09-30T15:13:05.130758Z","shell.execute_reply":"2025-09-30T15:13:05.141791Z"}},"outputs":[{"name":"stdout","text":"tensor([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.], dtype=torch.float64)\n[0. 1. 2. 3. 4. 5. 6. 7. 8.]\n","output_type":"stream"},{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"tensor([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"},"metadata":{}}],"execution_count":39},{"cell_type":"markdown","source":"### Reproductivity of Random arrays\nTo create random seed and need of Random seed","metadata":{}},{"cell_type":"code","source":"# When u want to create a random tensor, but want it to be same over ultiple execution and devices \n# use torch.manual_seed(seed = <number>)\nRANDOM_SEED=42\ntorch.manual_seed(seed = RANDOM_SEED)\nrandom_A = torch.rand(2,3)\n#Refresh needed everytime to create 2 same tensors\nRANDOM_SEED=42\ntorch.manual_seed(seed = RANDOM_SEED)\nrandom_B = torch.rand(2,3)\nprint(random_A)\nprint(random_B)\nrandom_A == random_B","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T15:20:31.793774Z","iopub.execute_input":"2025-09-30T15:20:31.794085Z","iopub.status.idle":"2025-09-30T15:20:31.807362Z","shell.execute_reply.started":"2025-09-30T15:20:31.794064Z","shell.execute_reply":"2025-09-30T15:20:31.806484Z"}},"outputs":[{"name":"stdout","text":"tensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009]])\ntensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009]])\n","output_type":"stream"},{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"tensor([[True, True, True],\n        [True, True, True]])"},"metadata":{}}],"execution_count":44}]}
